datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

model ProductImage {
  id        String   @id @default(ulid())
  url       String?
  altText   String?
  width     Int?
  height    Int?
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_image")
}

model ProductSEO {
  id          String   @id @default(ulid())
  title       String?
  description String?
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_seo")
}

model Product {
  id               String        @id @default(ulid())
  shopifyId        String
  handle           String
  availableForSale Boolean
  description      String?
  title            String?
  tags             String[]
  Shop             Shop?         @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ProductSEO       ProductSEO?
  ProductImage     ProductImage?
  onlineStoreUrl   String
  shopId           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  productSEOId     String?

  @@map("product")
}

model Shop {
  id               String    @id @default(ulid())
  shopifyId        String
  name             String
  description      String?
  shipsToCountries String[]
  Products         Product[]
  accessToken      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           String?

  @@map("shop")
}

model User {
  id            String    @id @default(ulid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  shops         Shop[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(ulid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(ulid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
