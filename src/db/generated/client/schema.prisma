datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

enum MediaContentType {
  VIDEO
  EXTERNAL_VIDEO
  IMAGE
  MODEL_3D
}

model FeaturedMediaVideo {
  id                     String               @id @default(ulid())
  url                    String
  productFeaturedMedia   ProductFeaturedMedia @relation(fields: [productFeaturedMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productFeaturedMediaId String               @unique
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("featured_media_video")
}

model FeaturedMediaExternalVideo {
  id                     String               @id @default(ulid())
  url                    String
  productFeaturedMedia   ProductFeaturedMedia @relation(fields: [productFeaturedMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productFeaturedMediaId String               @unique
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("featured_media_external_video")
}

model FeaturedMediaImage {
  id                     String               @id @default(ulid())
  url                    String
  productFeaturedMedia   ProductFeaturedMedia @relation(fields: [productFeaturedMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productFeaturedMediaId String               @unique
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("featured_media_image")
}

model ProductFeaturedMedia {
  id                           String                      @id @default(ulid())
  shopifyId                    String
  alt                          String?
  mediaContentType             MediaContentType
  featuredMediaVideo           FeaturedMediaVideo?
  featuredMediaExternalVideo   FeaturedMediaExternalVideo?
  featuredMediaImage           FeaturedMediaImage?
  Product                      Product                     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId                    String                      @unique
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @updatedAt
  featuredMediaVideoId         String?
  featuredMediaExternalVideoId String?
  featuredMediaImageId         String?

  @@map("product_featured_media")
}

model ProductSEO {
  id          String   @id @default(ulid())
  title       String?
  description String?
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_seo")
}

model ProductVariantProduct {
  id               String         @id @default(ulid())
  shopifyId        String
  handle           String
  onlineStoreUrl   String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("product_variant_product")
}

model ProductVariant {
  id                      String                 @id @default(ulid())
  shopifyId               String
  title                   String?
  productVariantProduct   ProductVariantProduct?
  product                 Product?               @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId               String?
  productVariantProductId String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@map("product_variant")
}

model Product {
  id             String                @id @default(ulid())
  shopifyId      String
  handle         String
  description    String?
  title          String?
  tags           String[]
  onlineStoreUrl String
  shop           Shop?                 @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ProductSEO     ProductSEO?
  variants       ProductVariant[]
  featuredMedia  ProductFeaturedMedia?
  shopId         String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  productSEOId   String?

  @@map("product")
}

model OrderPrice {
  id        String   @id @default(ulid())
  amount    Decimal  @default(0)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_price")
}

model Order {
  id           String      @id @default(ulid())
  shopifyId    String
  unpaid       Boolean     @default(false)
  processedAt  DateTime?
  orderPrice   OrderPrice?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderPriceId String?
  Shop         Shop?       @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shopId       String?

  @@map("order")
}

model Shop {
  id               String    @id @default(ulid())
  shopifyId        String
  name             String
  description      String?
  shipsToCountries String[]
  products         Product[]
  orders           Order[]
  accessToken      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           String?

  @@map("shop")
}

model User {
  id            String    @id @default(ulid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  shops         Shop[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(ulid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(ulid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
